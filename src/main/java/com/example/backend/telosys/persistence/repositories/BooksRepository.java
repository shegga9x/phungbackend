/*
 * Created on 2025-02-08 ( 14:50:02 )
 * Generated by Telosys ( https://www.telosys.org/ ) version 4.2.0
 */
package com.example.backend.telosys.persistence.repositories;

import java.util.List;

import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;

import com.example.backend.telosys.persistence.entities.Books;

/**
 * Spring Data JPA repository for entity "Books" <br>
 * 
 * This repository extends JpaRepository interface <br>
 * so it provides by default all the basic CRUD operations : <br>
 * findById, findAll, save, delete, etc <br>
 * with pagination and sorting : <br>
 * findAll(Pageable), findAll(Sort)<br>
 * 
 * This repository can be extended by adding specific "finders" methods<br>
 * To do so, see the "predicates conventions" for "derived query methods" in
 * Spring Data documentation
 * 
 * @author Telosys
 *
 */
public interface BooksRepository extends JpaRepository<Books, Integer> {

	@Query(value = "SELECT b.*, GROUP_CONCAT(DISTINCT a.name SEPARATOR ', ') AS listAuthors, AVG(r.score) AS avg_score "
			+
			"FROM books b " +
			"LEFT JOIN book_authors ba ON b.id = ba.book_id " +
			"LEFT JOIN authors a ON ba.author_id = a.id " +
			"LEFT JOIN ratings r ON b.id = r.book_id " +
			"WHERE (:bookType IS NULL OR b.type = :bookType) " +
			"GROUP BY b.id, b.title " +
			"ORDER BY CASE WHEN :flag = 'published_at' THEN b.published_at ELSE NULL END", nativeQuery = true)
	List<Object[]> findBooksWithAuthorsAndAvgScore(Pageable pageable, String bookType, String flag);

	@Query(value = "SELECT b.*, GROUP_CONCAT(DISTINCT a.name SEPARATOR ', ') AS listAuthors, AVG(r.score) AS avg_score "
			+
			"FROM books b " +
			"LEFT JOIN book_authors ba ON b.id = ba.book_id " +
			"LEFT JOIN authors a ON ba.author_id = a.id " +
			"LEFT JOIN ratings r ON b.id = r.book_id " +
			"WHERE (:bookType IS NULL OR b.type = :bookType) " +
			"GROUP BY b.id, b.title " +
			"ORDER BY b.price", nativeQuery = true)
	List<Object[]> findBooksWithAuthorsAndAvgScoreSortByPrice(Pageable pageable, String bookType);

	@Query(value = "SELECT COUNT(*) " +
			"FROM ( " +
			"    SELECT A.title, GROUP_CONCAT(DISTINCT D.name SEPARATOR ', ') AS listAuthors, AVG(C.score) AS avg_score "
			+
			"    FROM books A " +
			"    LEFT OUTER JOIN book_authors B ON A.id = B.book_id " +
			"    LEFT OUTER JOIN authors D ON B.author_id = D.id " +
			"    LEFT OUTER JOIN ratings C ON A.id = C.book_id " +
			"    WHERE (:bookType IS NULL OR A.type = :bookType) " +
			"    GROUP BY A.title " +
			") AS subquery", nativeQuery = true)
	long countBooksWithAuthorsAndAvgScore(String bookType);
	// Insert specific finders here

	// List<Books> findByXxx(String xxx);

	// List<Books> findByXxxStartingWith(String xxx);

	// List<Books> findByXxxContaining(String xxx);

	// List<Books> findByYyy(BigDecimal yyy);

	// List<Books> findByXxxContainingAndYyy(String xxx, BigDecimal yyy);
}
