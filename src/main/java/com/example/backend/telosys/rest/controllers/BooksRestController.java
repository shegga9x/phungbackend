/*
 * Created on 2025-02-08 ( 14:50:02 )
 * Generated by Telosys ( https://www.telosys.org/ ) version 4.2.0
 */
package com.example.backend.telosys.rest.controllers;

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.PageRequest;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.example.backend.telosys.rest.dto.BooksDTO;
import com.example.backend.telosys.rest.dto.BooksResponseDTO;
import com.example.backend.telosys.rest.services.BooksService;

@RestController
@RequestMapping(value = "/api/v1/books", produces = MediaType.APPLICATION_JSON_VALUE)
public class BooksRestController {

	private static final Logger logger = LoggerFactory.getLogger(BooksRestController.class);

	private BooksService service; // injected

	/**
	 * Constructor (usable for Dependency Injection)
	 *
	 * @param service
	 */
	protected BooksRestController(BooksService service) {
		super();
		this.service = service;
	}

	/**
	 * Get ALL with pagination
	 *
	 * @param page
	 * @param size
	 * @return
	 */
	@GetMapping("")
	protected ResponseEntity<List<BooksResponseDTO>> findAllWithPagination(@RequestParam(required = false) Integer page,
			@RequestParam(required = false) Integer size, @RequestParam(required = false) String type,
			@RequestParam(required = false) String sort) {
		if (page == null)
			page = 0;
		if (size == null)
			size = 10;
		Pageable pageable = PageRequest.of(page, size);
		List<BooksResponseDTO> results = service.findAllWithPagination(pageable, type, sort);
		return ResponseEntity.ok(results); // always 200
	}

	/**
	 * Get ALL
	 *
	 * @return
	 */
	// @GetMapping("")
	// protected ResponseEntity<List<BooksDTO>> findAll() {
	// logger.debug("REST : GET - findAll");
	// List<BooksDTO> list = service.findAll();
	// return ResponseEntity.ok(list); // always 200
	// }

	/**
	 * Get ONE identified by the given PK
	 *
	 * @param id
	 * @return 200 or 404
	 */
	@GetMapping("/{id}")
	protected ResponseEntity<BooksDTO> findById(@PathVariable int id) {
		logger.debug("REST : GET - findById");
		BooksDTO booksDTO = service.findById(id);
		if (booksDTO != null) {
			return ResponseEntity.ok(booksDTO); // 200 OK, found
		} else {
			return ResponseEntity.notFound().build(); // 404 Not found
		}
	}

	/**
	 * Create if doesn't exist
	 *
	 * @param booksDTO
	 * @return 201 created or 409 conflict
	 */
	@PostMapping("")
	protected ResponseEntity<Void> create(@RequestBody BooksDTO booksDTO) {
		logger.debug("REST : POST - create");
		if (service.create(booksDTO)) {
			return ResponseEntity.status(HttpStatus.CREATED).build(); // 201 created
		} else {
			return ResponseEntity.status(HttpStatus.CONFLICT).build(); // 409 Conflict
		}
	}

	/**
	 * Update or create
	 *
	 * @param id
	 * @param booksDTO
	 * @return 200 updated or created
	 */
	@PutMapping("/{id}")
	protected ResponseEntity<Void> save(@PathVariable int id, @RequestBody BooksDTO booksDTO) {
		logger.debug("REST : PUT - save");
		service.save(id, booksDTO);
		return ResponseEntity.ok().build(); // OK, updated or created
	}

	/**
	 * Update if exists
	 *
	 * @param booksDTO
	 * @return 200 updated or 404 not found
	 */
	@PutMapping("")
	protected ResponseEntity<Void> update(@RequestBody BooksDTO booksDTO) {
		logger.debug("REST : PUT - update");
		if (service.update(booksDTO)) {
			return ResponseEntity.ok().build(); // 200 OK, found and updated
		} else {
			return ResponseEntity.notFound().build(); // 404 Not found = "not updated"
		}
	}

	/**
	 * Partial update for the given PK (if it exists )
	 *
	 * @param id
	 * @param booksDTO
	 * @return 200 updated or 404 not found
	 */
	@PatchMapping("/{id}")
	protected ResponseEntity<Void> partialUpdate(@PathVariable int id, @RequestBody BooksDTO booksDTO) {
		logger.debug("REST : PATCH - partialUpdate");
		if (service.partialUpdate(id, booksDTO)) {
			return ResponseEntity.ok().build(); // OK, found and updated
		} else {
			return ResponseEntity.notFound().build(); // 404 Not found = "not updated"
		}
	}

	/**
	 * Delete by PK
	 *
	 * @param id
	 * @return 204 deleted or 404 not found
	 */
	@DeleteMapping("/{id}")
	protected ResponseEntity<Void> deleteById(@PathVariable int id) {
		logger.debug("REST : DELETE - deleteById");
		if (service.deleteById(id)) {
			return ResponseEntity.noContent().build(); // 204 No content = "deleted"
		} else {
			return ResponseEntity.notFound().build(); // 404 Not found = "not deleted"
		}
	}

	/**
	 * Get total number of books
	 *
	 * @return 200 with total count
	 */
	@GetMapping("/totalBooksWithAuthorsAndAvgScore")
	protected ResponseEntity<Long> getTotalBooksWithAuthorsAndAvgScore(
			@RequestParam(required = false) String type) {
		logger.debug("REST : GET - getTotalBooks " + type);
		long total = service.getTotalBooksWithAuthorsAndAvgScore(type);
		return ResponseEntity.ok(total); // 200 OK with total count
	}

}
