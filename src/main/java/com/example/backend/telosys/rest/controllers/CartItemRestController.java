package com.example.backend.telosys.rest.controllers;

/*
 * Created on 2025-02-21 ( 17:39:25 )
 * Generated by Telosys ( https://www.telosys.org/ ) version 4.2.0
 */

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.example.backend.telosys.rest.dto.CartItemDTO;
import com.example.backend.telosys.rest.dto.CartResponse;
import com.example.backend.telosys.rest.services.CartItemService;
import com.example.backend.util.Client;

@RestController
@RequestMapping(value = "/api/v1/cartitem", produces = MediaType.APPLICATION_JSON_VALUE)
@Client
public class CartItemRestController {

	private static final Logger logger = LoggerFactory.getLogger(CartItemRestController.class);

	private CartItemService service; // injected

	/**
	 * Constructor (usable for Dependency Injection)
	 *
	 * @param service
	 */
	protected CartItemRestController(CartItemService service) {
		super();
		this.service = service;
	}

	/**
	 * Get ALL
	 *
	 * @return
	 */
	@GetMapping("")
	protected ResponseEntity<List<CartItemDTO>> findAll() {
		logger.debug("REST : GET - findAll");
		List<CartItemDTO> list = service.findAll();
		return ResponseEntity.ok(list); // always 200
	}

	/**
	 * Get ONE identified by the given PK
	 *
	 * @param bookId
	 * @param userId
	 * @return 200 or 404
	 */
	@GetMapping("/{bookId}/{userId}")
	protected ResponseEntity<CartItemDTO> findById(@PathVariable long bookId, @PathVariable long userId) {
		logger.debug("REST : GET - findById");
		CartItemDTO cartItemDTO = service.findById(bookId, userId);
		if (cartItemDTO != null) {
			return ResponseEntity.ok(cartItemDTO); // 200 OK, found
		} else {
			return ResponseEntity.notFound().build(); // 404 Not found
		}
	}

	/**
	 * Get ALL items for a specific user
	 *
	 * @param userId
	 * @return 200 or 404
	 */
	@GetMapping("/user/{userId}")
	protected ResponseEntity<List<CartResponse>> findByUserId(@PathVariable long userId) {
		logger.debug("REST : GET - findByUserId");
		List<CartResponse> list = service.findByUserId(userId);
		if (list != null && !list.isEmpty()) {
			return ResponseEntity.ok(list); // 200 OK, found
		} else {
			return ResponseEntity.notFound().build(); // 404 Not found
		}
	}

	/**
	 * Create if doesn't exist
	 *
	 * @param cartItemDTO
	 * @return 201 created or 409 conflict
	 */
	@PostMapping("")
	protected ResponseEntity<Void> create(@RequestBody CartItemDTO cartItemDTO) {
		logger.debug("REST : POST - create");
		if (service.create(cartItemDTO)) {
			return ResponseEntity.status(HttpStatus.CREATED).build(); // 201 created
		} else {
			return ResponseEntity.status(HttpStatus.CONFLICT).build(); // 409 Conflict
		}
	}

	/**
	 * Update or create
	 *
	 * @param bookId
	 * @param userId
	 * @param cartItemDTO
	 * @return 200 updated or created
	 */
	@PutMapping("/{bookId}/{userId}")
	protected ResponseEntity<Void> save(@PathVariable long bookId, @PathVariable long userId,
			@RequestBody CartItemDTO cartItemDTO) {
		logger.debug("REST : PUT - save");
		service.save(bookId, userId, cartItemDTO);
		return ResponseEntity.ok().build(); // OK, updated or created
	}

	/**
	 * Update if exists
	 *
	 * @param cartItemDTO
	 * @return 200 updated or 404 not found
	 */
	@PutMapping("")
	protected ResponseEntity<Void> update(@RequestBody CartItemDTO cartItemDTO) {
		logger.debug("REST : PUT - update");
		if (service.update(cartItemDTO)) {
			return ResponseEntity.ok().build(); // 200 OK, found and updated
		} else {
			return ResponseEntity.notFound().build(); // 404 Not found = "not updated"
		}
	}

	/**
	 * Add or update a list of cart items
	 *
	 * @param cartItemDTOList
	 * @return 200 OK
	 */
	@PostMapping("/list")
	protected ResponseEntity<Void> addOrUpdateList(@RequestBody List<CartItemDTO> cartItemDTOList) {
		logger.debug("REST : POST - addOrUpdateList");
		service.addOrUpdateCartItems(cartItemDTOList);
		return ResponseEntity.ok().build(); // 200 OK
	}

	/**
	 * Partial update for the given PK (if it exists )
	 *
	 * @param bookId
	 * @param userId
	 * @param cartItemDTO
	 * @return 200 updated or 404 not found
	 */
	@PatchMapping("/{bookId}/{userId}")
	protected ResponseEntity<Void> partialUpdate(@PathVariable long bookId, @PathVariable long userId,
			@RequestBody CartItemDTO cartItemDTO) {
		logger.debug("REST : PATCH - partialUpdate");
		if (service.partialUpdate(bookId, userId, cartItemDTO)) {
			return ResponseEntity.ok().build(); // OK, found and updated
		} else {
			return ResponseEntity.notFound().build(); // 404 Not found = "not updated"
		}
	}

	/**
	 * Delete by PK
	 *
	 * @param bookId
	 * @param userId
	 * @return 204 deleted or 404 not found
	 */
	@DeleteMapping("/{bookId}/{userId}")
	protected ResponseEntity<Void> deleteById(@PathVariable long bookId, @PathVariable long userId) {
		logger.debug("REST : DELETE - deleteById");
		if (service.deleteById(bookId, userId)) {
			return ResponseEntity.noContent().build(); // 204 No content = "deleted"
		} else {
			return ResponseEntity.notFound().build(); // 404 Not found = "not deleted"
		}
	}

	/**
	 * Add item to cart
	 *
	 * @param cartItemDTO
	 * @return 200 added or 409 conflict
	 */
	@PostMapping("/add")
	protected ResponseEntity<Void> addToCart(@RequestBody CartItemDTO cartItemDTO) {
		logger.debug("REST : POST - addToCart");
		if (service.addToCart(cartItemDTO)) {
			return ResponseEntity.ok().build(); // 200 OK, added
		} else {
			return ResponseEntity.status(HttpStatus.CONFLICT).build(); // 409 Conflict
		}
	}
}
