/*
 * Created on 2025-02-08 ( 14:50:02 )
 * Generated by Telosys ( https://www.telosys.org/ ) version 4.2.0
 */
package com.example.backend.telosys.rest.services;

import java.math.BigDecimal;
import java.util.List;
import java.util.Optional;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;

import com.example.backend.telosys.persistence.entities.Orders;
import com.example.backend.telosys.persistence.repositories.BooksRepository;
import com.example.backend.telosys.persistence.repositories.OrdersRepository;
import com.example.backend.telosys.rest.dto.BooksDTO;
import com.example.backend.telosys.rest.dto.OrdersDTO;
import com.example.backend.telosys.rest.dto.OrdersResponseDTO;
import com.example.backend.telosys.rest.dto.UserDTO;
import com.example.backend.telosys.rest.services.commons.GenericService;
import com.example.backend.users.repository.UserRepository;
import com.example.backend.users.service.UserService;

import org.springframework.transaction.annotation.Transactional;

/**
 * REST service for entity "Orders" <br>
 * 
 * This service provides all the necessary operations required by the REST
 * controller <br>
 * 
 * @author Telosys
 *
 */
@Service
public class OrdersService extends GenericService<Orders, OrdersDTO> {

	private static final Logger logger = LoggerFactory.getLogger(OrdersService.class);

	private final OrdersRepository repository; // injected by constructor

	private final BooksService booksService; // injected by constructor
	private final UserService usersService; // injected by constructor

	/**
	 * Constructor (usable for Dependency Injection)
	 * 
	 * @param repository the repository to be injected
	 */
	public OrdersService(OrdersRepository repository, BooksRepository booksRepository, UserRepository uRepository,
			BooksService booksService, UserService usersService) {
		super(Orders.class, OrdersDTO.class);
		this.repository = repository;
		this.booksService = booksService;
		this.usersService = usersService;
	}

	/**
	 * Returns the entity ID object from the given DTO
	 *
	 * @param dto
	 * @return
	 */
	private Long getEntityId(OrdersDTO dto) {
		return dto.getId();
	}

	/**
	 * Finds all occurrences of the entity
	 *
	 * @return
	 */
	public List<OrdersDTO> findAll() {
		logger.debug("findAll()");
		Iterable<Orders> all = repository.findAll();
		return entityListToDtoList(all);
	}

	/**
	 * Finds the entity identified by the given PK
	 *
	 * @param id
	 * @return the entity or null if not found
	 */
	public OrdersDTO findById(Long id) {
		Long entityId = id;
		logger.debug("findById({})", entityId);
		Optional<Orders> optionalEntity = repository.findById(entityId);
		return entityToDto(optionalEntity);
	}

	/**
	 * Saves the given entity with the given PK <br>
	 * "UPSERT" operation (updated if it exists or created if it does not exist)
	 *
	 * @param id
	 * @param dto
	 */
	public void save(Long id, OrdersDTO dto) {
		Long entityId = id;
		logger.debug("save({},{})", entityId, dto);
		// force PK in DTO (just to be sure to conform with the given PK)
		dto.setId(id);
		repository.save(dtoToEntity(dto));
	}

	/**
	 * Updates the given entity if it exists
	 *
	 * @param dto
	 * @return true if updated, false if not found
	 */
	public boolean update(OrdersDTO dto) {
		logger.debug("update({})", dto);
		if (repository.existsById(getEntityId(dto))) {
			repository.save(dtoToEntity(dto));
			return true; // find and updated
		} else {
			return false; // not found (not updated)
		}
	}

	/**
	 * Updates partially the given entity if it exists
	 *
	 * @param id
	 * @param dto
	 * @return true if updated, false if not found
	 */
	public boolean partialUpdate(Long id, OrdersDTO dto) {
		Long entityId = id;
		logger.debug("partialUpdate({}, {})", entityId, dto);
		Optional<Orders> optionalEntity = repository.findById(entityId);
		if (optionalEntity.isPresent()) {
			Orders entity = optionalEntity.get();
			// implement here the partial update
			// entity.setXxx(dto.getXxx());
			// etc ...
			repository.save(entity);
			return true; // find and updated
		} else {
			return false; // not found (not updated)
		}
	}

	/**
	 * Creates the given entity
	 *
	 * @param dto
	 * @return true if created, false if already exists
	 */
	public boolean create(OrdersDTO dto) {
		logger.debug("create({})", dto);
		// auto-generated Primary Key
		repository.save(dtoToEntity(dto));
		return true; // always created
	}

	/**
	 * Deletes an entity by its PK
	 *
	 * @param id
	 * @return true if deleted, false if not found
	 */
	public boolean deleteById(Long id) {
		Long entityId = id;
		logger.debug("deleteById({})", entityId);
		if (repository.existsById(entityId)) {
			repository.deleteById(entityId);
			return true; // find and deleted
		} else {
			return false; // not found (not deleted)
		}
	}

	/**
	 * Buys a book by creating an order
	 *
	 * @param dto
	 * @return the created order
	 */
	@Transactional
	public OrdersResponseDTO buyBook(OrdersDTO dto) {
		BooksDTO book = booksService.findById(dto.getBookId());
		if (book == null) {
			throw new IllegalArgumentException("Book not found");
		}
		if (book.getStock() < dto.getQuality()) {
			throw new IllegalArgumentException("Not enough stock");
		}
		BigDecimal cost = book.getPrice().multiply(BigDecimal.valueOf(dto.getQuality()));
		UserDTO user = usersService.findById(dto.getUserId());
		if (user.getBalance().compareTo(cost) < 0) {
			throw new IllegalArgumentException("Not enough balance");
		}
		BigDecimal remain = user.getBalance().subtract(cost);
		user.setBalance(remain);
		book.setStock(book.getStock() - dto.getQuality());
		try {
			booksService.update(book);
			usersService.update(user);
		} catch (Exception e) {
			throw new RuntimeException("Failed to update book or user", e);
		}
		
		Orders order = dtoToEntity(dto);
		Orders savedOrder = repository.save(order);
		OrdersResponseDTO ordersResponseDTO = new OrdersResponseDTO(entityToDto(savedOrder), cost, remain);
		return ordersResponseDTO;
	}
}
// -----------------------------------------------------------------------------------------
// Specific "finders"
// -----------------------------------------------------------------------------------------
/***
 * public List<OrdersDTO> findByTitle(String title) {
 * logger.debug("findByTitle({})", title);
 * // List<Orders> list = repository.findByTitle(title);
 * List<Orders> list = repository.findByTitleContaining(title);
 * return entityListToDtoList(list);
 * }
 * 
 * public List<OrdersDTO> findByPrice(BigDecimal price) {
 * logger.debug("findByPrice({})", price);
 * // List<Orders> list = repository.findByTitle(title);
 * List<Orders> list = repository.findByPrice(price);
 * return entityListToDtoList(list);
 * }
 * 
 * public List<OrdersDTO> findByTitleAndPrice(String title, BigDecimal price) {
 * logger.debug("findByTitleAndPrice({}, {})", title, price);
 * List<Orders> list = repository.findByTitleContainingAndPrice(title, price);
 * return entityListToDtoList(list);
 * }
 ***/
