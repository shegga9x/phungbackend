/*
 * Created on 2025-02-08 ( 14:50:02 )
 * Generated by Telosys ( https://www.telosys.org/ ) version 4.2.0
 */
package com.example.backend.thirtParty.telosys.persistence.repositories;

import java.util.List;

import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;

import com.example.backend.thirtParty.telosys.persistence.entities.Books;

import feign.Param;

/**
 * Spring Data JPA repository for entity "Books" <br>
 * 
 * This repository extends JpaRepository interface <br>
 * so it provides by default all the basic CRUD operations : <br>
 * findById, findAll, save, delete, etc <br>
 * with pagination and sorting : <br>
 * findAll(Pageable), findAll(Sort)<br>
 * 
 * This repository can be extended by adding specific "finders" methods<br>
 * To do so, see the "predicates conventions" for "derived query methods" in
 * Spring Data documentation
 * 
 * @author Telosys
 *
 */
public interface BooksRepository extends JpaRepository<Books, Long> {

	@Query("SELECT COUNT(b) FROM Books b WHERE (:type IS NULL OR b.type = :type)AND (:title IS NULL OR b.title LIKE %:title%)")
	long countBooksWithAuthorsAndAvgScore(@Param("type") String type, @Param("title") String title);

	@Query(value = "SELECT b.*, " +
			"(SELECT COALESCE(AVG(r.score), 0) FROM ratings r WHERE r.book_id = b.id) AS avgRating, " +
			"(SELECT GROUP_CONCAT(a.name SEPARATOR ', ') FROM authors a " +
			"JOIN book_authors ba ON a.id = ba.author_id " +
			"WHERE ba.book_id = b.id) AS authorNames " +
			"FROM books b " +
			"WHERE (:type IS NULL OR b.type = :type) AND (:title IS NULL OR b.title LIKE %:title%)", nativeQuery = true)
	List<Object[]> findBooksWithAuthorsAndRatings(Pageable pageable, @Param("type") String type,
			@Param("title") String title);

	@Query(value = "SELECT b.*, " +
			"(SELECT COALESCE(AVG(r.score), 0) FROM ratings r WHERE r.book_id = b.id) AS avgRating, " +
			"(SELECT GROUP_CONCAT(a.name SEPARATOR ', ') FROM authors a " +
			"JOIN book_authors ba ON a.id = ba.author_id " +
			"WHERE ba.book_id = b.id) AS authorNames " +
			"FROM books b " +
			"WHERE b.id = :id", nativeQuery = true)
	Object findBooksWithAuthorsAndRatingsById(@Param("id") Long id);

	@Query(value = "SELECT b.title " +
			"FROM books b " +
			"WHERE (:title IS NULL OR b.title LIKE %:title%) " +
			"LIMIT 500", nativeQuery = true)
	List<String> findBooksWithTitle(@Param("title") String title);

}
