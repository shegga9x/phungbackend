/*
 * Created on 2025-02-08 ( 14:50:02 )
 * Generated by Telosys ( https://www.telosys.org/ ) version 4.2.0
 */
package com.example.backend.thirtParty.telosys.rest.services;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.example.backend.thirtParty.solr.crud.BookSolrService;
import com.example.backend.thirtParty.telosys.persistence.entities.Books;
import com.example.backend.thirtParty.telosys.persistence.repositories.BooksRepository;
import com.example.backend.thirtParty.telosys.rest.dto.BooksDTO;
import com.example.backend.thirtParty.telosys.rest.dto.BooksResponseDTO;
import com.example.backend.thirtParty.telosys.rest.services.commons.GenericService;

import io.github.resilience4j.circuitbreaker.annotation.CircuitBreaker;
import io.github.resilience4j.retry.annotation.Retry;

/**
 * REST service for entity "Books" <br>
 * 
 * This service provides all the necessary operations required by the REST
 * controller <br>
 * 
 * @author Telosys
 *
 */
@Service
public class BooksService extends GenericService<Books, BooksDTO> {

	private static final Logger logger = LoggerFactory.getLogger(BooksService.class);

	private final BooksRepository repository; // injected by constructor
	private final BookSolrService bookSolrService; // injected by constructor

	/**
	 * Constructor (usable for Dependency Injection)
	 * 
	 * @param repository the repository to be injected
	 */
	public BooksService(BooksRepository repository, BookSolrService bookSolrService) {
		super(Books.class, BooksDTO.class);
		this.repository = repository;
		this.bookSolrService = bookSolrService;

	}

	/**
	 * Returns the entity ID object from the given DTO
	 *
	 * @param dto
	 * @return
	 */
	private Long getEntityId(BooksDTO dto) {
		return dto.getId();
	}

	/**
	 * Finds all occurrences of the entity
	 *
	 * @return
	 */
	public List<BooksDTO> findAll() {
		logger.debug("findAll()");
		Iterable<Books> all = repository.findAll();
		return entityListToDtoList(all);
	}

	/**
	 * Finds the entity identified by the given PK
	 *
	 * @param id
	 * @return the entity or null if not found
	 */
	public BooksDTO findById(Long id) {
		Long entityId = id;
		logger.debug("findById({})", entityId);
		Optional<Books> optionalEntity = repository.findById(entityId);
		return entityToDto(optionalEntity);
	}

	/**
	 * Saves the given entity with the given PK <br>
	 * "UPSERT" operation (updated if it exists or created if it does not exist)
	 *
	 * @param id
	 * @param dto
	 */
	public void save(Long id, BooksDTO dto) {
		Long entityId = id;
		logger.debug("save({},{})", entityId, dto);
		// force PK in DTO (just to be sure to conform with the given PK)
		dto.setId(id);
		repository.save(dtoToEntity(dto));
	}

	/**
	 * Saves all given entities
	 *
	 * @param dtos
	 */
	public void saveAll(List<BooksDTO> dtos) {
		logger.debug("saveAll({})", dtos);
		List<Books> entities = dtoListToEntityList(dtos);
		repository.saveAll(entities);
	}

	/**
	 * Updates the given entity if it exists
	 *
	 * @param dto
	 * @return true if updated, false if not found
	 */
	public boolean update(BooksDTO dto) {
		logger.debug("update({})", dto);
		if (repository.existsById(getEntityId(dto))) {
			repository.save(dtoToEntity(dto));
			return true; // find and updated
		} else {
			return false; // not found (not updated)
		}
	}

	/**
	 * Updates partially the given entity if it exists
	 *
	 * @param id
	 * @param dto
	 * @return true if updated, false if not found
	 */
	public boolean partialUpdate(Long id, BooksDTO dto) {
		Long entityId = id;
		logger.debug("partialUpdate({}, {})", entityId, dto);
		Optional<Books> optionalEntity = repository.findById(entityId);
		if (optionalEntity.isPresent()) {
			Books entity = optionalEntity.get();
			// implement here the partial update
			// entity.setXxx(dto.getXxx());
			// etc ...
			repository.save(entity);
			return true; // find and updated
		} else {
			return false; // not found (not updated)
		}
	}

	/**
	 * Creates the given entity
	 *
	 * @param dto
	 * @return true if created, false if already exists
	 */
	public boolean create(BooksDTO dto) {
		logger.debug("create({})", dto);
		// auto-generated Primary Key
		repository.save(dtoToEntity(dto));
		return true; // always created
	}

	/**
	 * Deletes an entity by its PK
	 *
	 * @param id
	 * @return true if deleted, false if not found
	 */
	public boolean deleteById(Long id) {
		Long entityId = id;
		logger.debug("deleteById({})", entityId);
		if (repository.existsById(entityId)) {
			repository.deleteById(entityId);
			return true; // find and deleted
		} else {
			return false; // not found (not deleted)
		}
	}

	public BooksResponseDTO findBooksWithAuthorsAndRatingsById(Long id) {
		return mapObjectToDTO(repository.findBooksWithAuthorsAndRatingsById(id));
	}

	@Retry(name = "solrRetry", fallbackMethod = "fallbackFindAllWithPagination")
	@CircuitBreaker(name = "solrCircuitBreaker", fallbackMethod = "fallbackFindAllWithPagination")
	public List<BooksResponseDTO> findAllWithPagination(Pageable pageable, String bookType, String flag, String title) {
		logger.debug("findAllWithPagination({}, {}, {})", pageable, bookType, flag);
		return bookSolrService.findBooksWithAuthorsAndRatings(pageable, bookType, flag, title);

	}
	public List<BooksResponseDTO> fallbackFindAllWithPagination(Pageable pageable, String bookType, String flag,
			String title, Throwable ex) {
		logger.warn("Fallback triggered for findAllWithPagination. Fetching from DB instead. Error: {}",
				ex.getMessage());
		return mapObjectArrayToDTO(repository.findBooksWithAuthorsAndRatings(pageable, bookType, title));
	}

	@Retry(name = "solrRetry", fallbackMethod = "fallbackSearch")
	@CircuitBreaker(name = "solrCircuitBreaker", fallbackMethod = "fallbackSearch")
	public List<String> search(String title) {
		List<BooksResponseDTO> books = bookSolrService.searchBooks(title);
		return books.stream().map(BooksResponseDTO::getTitle).collect(Collectors.toList());
	}

	public List<String> fallbackSearch(String title, Throwable ex) {
		logger.warn("Fallback triggered for search. Fetching from DB instead. Error: {}", ex.getMessage());
		return repository.findBooksWithTitle(title);
	}

	@Retry(name = "solrRetry", fallbackMethod = "fallbackGetTotalBooks")
	@CircuitBreaker(name = "solrCircuitBreaker", fallbackMethod = "fallbackGetTotalBooks")
	public long getTotalBooksWithAuthorsAndAvgScore(String bookType, String title) {
		logger.debug("getTotalBooks()");
		return bookSolrService.getTotalDocuments(bookType, title);

	}

	public long fallbackGetTotalBooks(String bookType, String title, Throwable ex) {
		logger.warn("Fallback triggered for getTotalBooksWithAuthorsAndAvgScore. Fetching from DB. Error: {}",
				ex.getMessage());
		return repository.countBooksWithAuthorsAndAvgScore(bookType, title);
	}
}
