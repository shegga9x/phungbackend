package com.example.backend.thirtParty.telosys.rest.services;

import java.util.ArrayList;

/*
 * Created on 2025-02-21 ( 17:39:25 )
 * Generated by Telosys ( https://www.telosys.org/ ) version 4.2.0
 */

import java.util.List;
import java.util.Optional;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;

import com.example.backend.thirtParty.telosys.persistence.entities.Books;
import com.example.backend.thirtParty.telosys.persistence.entities.CartItem;
import com.example.backend.thirtParty.telosys.persistence.entities.CartItemId;
import com.example.backend.thirtParty.telosys.persistence.repositories.BooksRepository;
import com.example.backend.thirtParty.telosys.persistence.repositories.CartItemRepository;
import com.example.backend.thirtParty.telosys.rest.dto.CartItemDTO;
import com.example.backend.thirtParty.telosys.rest.dto.CartResponse;
import com.example.backend.thirtParty.telosys.rest.services.commons.GenericService;
import com.example.backend.util.Client;

/**
 * REST service for entity "CartItem" <br>
 * 
 * This service provides all the necessary operations required by the REST
 * controller <br>
 * 
 * @author Telosys
 *
 */
@Service
@Client
public class CartItemService extends GenericService<CartItem, CartItemDTO> {

	private static final Logger logger = LoggerFactory.getLogger(CartItemService.class);

	private final CartItemRepository repository; // injected by constructor
	private final BooksRepository booksRepository; // injected by constructor

	/**
	 * Constructor (usable for Dependency Injection)
	 * 
	 * @param repository the repository to be injected
	 */

	/**
	 * Returns the entity ID object from the given DTO
	 *
	 * @param dto
	 * @return
	 */
	private CartItemId getEntityId(CartItemDTO dto) {
		return new CartItemId(dto.getBookId(), dto.getUserId());
	}

	public CartItemService(CartItemRepository repository,
			BooksRepository booksRepository) {
		super(CartItem.class, CartItemDTO.class);
		this.repository = repository;
		this.booksRepository = booksRepository;
	}

	/**
	 * Finds all occurrences of the entity
	 *
	 * @return
	 */
	public List<CartItemDTO> findAll() {
		logger.debug("findAll()");
		Iterable<CartItem> all = repository.findAll();
		return entityListToDtoList(all);
	}

	/**
	 * Finds the entity identified by the given PK
	 *
	 * @param bookId
	 * @param userId
	 * @return the entity or null if not found
	 */
	public CartItemDTO findById(long bookId, long userId) {
		CartItemId entityId = new CartItemId(bookId, userId);
		logger.debug("findById({})", entityId);
		Optional<CartItem> optionalEntity = repository.findById(entityId);
		return entityToDto(optionalEntity);
	}

	/**
	 * Saves the given entity with the given PK <br>
	 * "UPSERT" operation (updated if it exists or created if it does not exist)
	 *
	 * @param bookId
	 * @param userId
	 * @param dto
	 */
	public void save(long bookId, long userId, CartItemDTO dto) {
		CartItemId entityId = new CartItemId(bookId, userId);
		logger.debug("save({},{})", entityId, dto);
		// force PK in DTO (just to be sure to conform with the given PK)
		dto.setBookId(bookId);
		dto.setUserId(userId);
		repository.save(dtoToEntity(dto));
	}

	/**
	 * Updates the given entity if it exists
	 *
	 * @param dto
	 * @return true if updated, false if not found
	 */
	public boolean update(CartItemDTO dto) {
		logger.debug("update({})", dto);
		if (repository.existsById(getEntityId(dto))) {
			repository.save(dtoToEntity(dto));
			return true; // find and updated
		} else {
			return false; // not found (not updated)
		}
	}

	/**
	 * Updates partially the given entity if it exists
	 *
	 * @param bookId
	 * @param userId
	 * @param dto
	 * @return true if updated, false if not found
	 */
	public boolean partialUpdate(long bookId, long userId, CartItemDTO dto) {
		CartItemId entityId = new CartItemId(bookId, userId);
		logger.debug("partialUpdate({}, {})", entityId, dto);
		Optional<CartItem> optionalEntity = repository.findById(entityId);
		if (optionalEntity.isPresent()) {
			CartItem entity = optionalEntity.get();
			// implement here the partial update
			// entity.setXxx(dto.getXxx());
			// etc ...
			repository.save(entity);
			return true; // find and updated
		} else {
			return false; // not found (not updated)
		}
	}

	/**
	 * Creates the given entity
	 *
	 * @param dto
	 * @return true if created, false if already exists
	 */
	public boolean create(CartItemDTO dto) {
		logger.debug("create({})", dto);
		if (repository.existsById(getEntityId(dto))) {
			return false; // already exists, not created
		} else {
			repository.save(dtoToEntity(dto));
			return true; // created
		}
	}

	/**
	 * Deletes an entity by its PK
	 *
	 * @param bookId
	 * @param userId
	 * @return true if deleted, false if not found
	 */
	public boolean deleteById(long bookId, long userId) {
		CartItemId entityId = new CartItemId(bookId, userId);
		logger.debug("deleteById({})", entityId);
		if (repository.existsById(entityId)) {
			repository.deleteById(entityId);
			return true; // find and deleted
		} else {
			return false; // not found (not deleted)
		}
	}

	/**
	 * Deletes a list of cart items by their IDs
	 *
	 * @param cartItemIds
	 * @return true if all items were deleted successfully, false otherwise
	 */
	public boolean deleteByList(List<CartItemDTO> cartItemDTOs) {
		logger.debug("deleteByIds({})", cartItemDTOs);
		boolean allSuccess = true;

		repository.deleteAll(dtoListToEntityList(cartItemDTOs));

		return allSuccess;
	}

	/**
	 * Finds all cart items by user ID
	 *
	 * @param userId
	 * @return list of cart items
	 */
	public List<CartResponse> findByUserId(long userId) {
		logger.debug("findByUserId({})", userId);
		List<CartItem> list = repository.findByUserId(userId);
		List<CartResponse> responseList = new ArrayList<>();
		for (CartItem cartItem : list) {
			CartResponse response = new CartResponse();
			Books book = booksRepository.findById(cartItem.getBookId()).get();
			response.setId(cartItem.getBooks().getId());
			response.setTitle(book.getTitle());
			response.setType(book.getType());
			response.setPublishedAt(book.getPublishedAt());
			response.setStock(book.getStock());
			response.setPrice(book.getPrice());
			// response.setAuthors(book.getAuthors());
			// response.setAverageRating(book.getAverageRating());
			// response.setRatings(book.getRatings());
			response.setQuantity(cartItem.getQuantity());
			responseList.add(response);
		}
		return responseList;
	}

	public List<CartItemDTO> findByUserIdDTO(long userId) {
		logger.debug("findByUserId({})", userId);
		List<CartItem> list = repository.findByUserId(userId);
		return entityListToDtoList(list);

	}

	/**
	 * Adds an item to the cart
	 *
	 * @param dto
	 * @return true if added, false if already exists
	 */
	public boolean addToCart(CartItemDTO dto) {
		logger.debug("addToCart({})", dto);

		Optional<CartItem> existingCartItem = repository.findById(getEntityId(dto));
		if (existingCartItem.isPresent()) {
			CartItem cartItem = existingCartItem.get();
			cartItem.setQuantity(cartItem.getQuantity() + dto.getQuantity());
			repository.save(cartItem);
			return true;
		} else {
			repository.save(dtoToEntity(dto));
			return true; // created
		}
	}

	/**
	 * Adds or updates a list of cart items
	 *
	 * @param cartItems
	 * @return true if all items were added or updated successfully, false otherwise
	 */
	public boolean addOrUpdateCartItems(List<CartItemDTO> cartItems) {
		logger.debug("addOrUpdateCartItems({})", cartItems);
		boolean allSuccess = true;

		for (CartItemDTO dto : cartItems) {
			Optional<CartItem> existingCartItem = repository.findById(getEntityId(dto));
			if (existingCartItem.isPresent()) {
				CartItem cartItem = existingCartItem.get();
				cartItem.setQuantity(dto.getQuantity());
				repository.save(cartItem);
			} else {
				repository.save(dtoToEntity(dto));
			}
		}

		return allSuccess;
	}

	// -----------------------------------------------------------------------------------------
	// Specific "finders"
	// -----------------------------------------------------------------------------------------
	/***
	 * public List<CartItemDTO> findByTitle(String title) {
	 * logger.debug("findByTitle({})", title);
	 * // List<CartItem> list = repository.findByTitle(title);
	 * List<CartItem> list = repository.findByTitleContaining(title);
	 * return entityListToDtoList(list);
	 * }
	 * 
	 * public List<CartItemDTO> findByPrice(BigDecimal price) {
	 * logger.debug("findByPrice({})", price);
	 * // List<CartItem> list = repository.findByTitle(title);
	 * List<CartItem> list = repository.findByPrice(price);
	 * return entityListToDtoList(list);
	 * }
	 * 
	 * public List<CartItemDTO> findByTitleAndPrice(String title, BigDecimal price)
	 * {
	 * logger.debug("findByTitleAndPrice({}, {})", title, price);
	 * List<CartItem> list = repository.findByTitleContainingAndPrice(title, price);
	 * return entityListToDtoList(list);
	 * }
	 ***/
}
