/*
 * Created on 2025-02-08 ( 14:50:02 )
 * Generated by Telosys ( https://www.telosys.org/ ) version 4.2.0
 */
package com.example.backend.thirtParty.telosys.rest.services.commons;

import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Optional;

import org.modelmapper.ModelMapper;
import org.modelmapper.PropertyMap;
import org.modelmapper.convention.MatchingStrategies;

import com.example.backend.thirtParty.telosys.persistence.entities.Ratings;
import com.example.backend.thirtParty.telosys.rest.dto.BooksResponseDTO;
import com.example.backend.thirtParty.telosys.rest.dto.RatingsDTO;
import com.example.backend.users.User;

/**
 * Abstract class for REST services <br>
 * 
 * @author Telosys
 *
 * @param <ENTITY>
 * @param <DTO>
 */
public abstract class GenericService<ENTITY, DTO> {

	private final ModelMapper mapper = new ModelMapper();

	private final Class<ENTITY> entityClass;
	private final Class<DTO> dtoClass;

	/**
	 * Constructor
	 * 
	 * @param entityClass
	 * @param dtoClass
	 */
	protected GenericService(Class<ENTITY> entityClass, Class<DTO> dtoClass) {
		super();
		this.entityClass = entityClass;
		this.dtoClass = dtoClass;
	}

	/**
	 * Converts DTO to JPA ENTITY
	 * 
	 * @param dto
	 * @return
	 */

	protected ENTITY dtoToEntity(DTO dto) {

		mapper.getConfiguration().setMatchingStrategy(MatchingStrategies.STRICT);

		return mapper.map(dto, entityClass);

	}

	/**
	 * Converts DTO to JPA ENTITY
	 * 
	 * @param dto
	 * @return
	 */

	protected User dtoToEntity(DTO dto, User user) {

		mapper.getConfiguration().setMatchingStrategy(MatchingStrategies.STRICT);

		mapper.map(dto, user);
		return user;

	}

	/**
	 * Converts JPA ENTITY to DTO
	 * 
	 * @param entity
	 * @return
	 */
	protected DTO entityToDto(ENTITY entity) {
		mapper.getConfiguration().setMatchingStrategy(MatchingStrategies.STRICT);

		return mapper.map(entity, dtoClass);
		// return BookMapper.getInstance().entityToDto(entity);
	}

	/**
	 * Converts JPA ENTITY to DTO
	 * 
	 * @param entity
	 * @return
	 */
	protected DTO entityToDtoNest(ENTITY entity) {
		mapper.addMappings(new PropertyMap<Ratings, RatingsDTO>() {
			@Override
			protected void configure() {
				map(source.getUser(), destination.getUser());
			}
		});

		return mapper.map(entity, dtoClass);
		// return BookMapper.getInstance().entityToDto(entity);
	}

	/**
	 * Converts an Optional JPA ENTITY to DTO
	 * 
	 * @param optionalEntity
	 * @return the DTO or null if nothing in optional
	 */
	protected DTO entityToDto(Optional<ENTITY> optionalEntity) {
		if (optionalEntity.isPresent()) {
			return entityToDto(optionalEntity.get());
		} else {
			return null;
		}
	}

	/**
	 * Converts a collection of JPA ENTITIES to a collection of DTO
	 * 
	 * @param entities
	 * @return
	 */
	protected List<DTO> entityListToDtoList(Iterable<ENTITY> entities) {
		List<DTO> dtoList = new LinkedList<>();
		if (entities != null) {
			for (ENTITY e : entities) {
				dtoList.add(entityToDto(e));
			}
		}
		return dtoList;
	}

	/**
	 * Converts a collection of DTO to a collection of JPA ENTITIES
	 * 
	 * @param dtoList
	 * @return
	 */
	protected List<ENTITY> dtoListToEntityList(Iterable<DTO> dtoList) {
		List<ENTITY> entityList = new LinkedList<>();
		if (dtoList != null) {
			for (DTO dto : dtoList) {
				entityList.add(dtoToEntity(dto));
			}
		}
		return entityList;
	}

	protected List<BooksResponseDTO> mapObjectArrayToDTO(List<Object[]> objects) {
		List<BooksResponseDTO> result = new ArrayList<>();

		for (Object[] row : objects) {
			BooksResponseDTO dto = new BooksResponseDTO();
			if (row.length >= 8) {
				dto.setId((Long) row[0]);
				dto.setTitle((String) row[1]);
				Timestamp sqlTime = (Timestamp) row[3];
				sqlTime.toLocalDateTime().toLocalDate();
				dto.setPublishedAt(sqlTime.toLocalDateTime());
				dto.setStock((Integer) row[4]);
				dto.setPrice((BigDecimal) row[5]);
				dto.setAuthors(row[9] != null ? ((String) row[9]).split(",") : new String[] { "" });
				dto.setType((String) row[2]);
				dto.setAverageRating(row[8] != null ? (BigDecimal) row[8] : BigDecimal.ZERO);
				dto.setUrlImg((String) row[7]);
			}

			result.add(dto);
		}

		return result;
	}

	protected BooksResponseDTO mapObjectToDTO(Object object) {
		Object[] row = (Object[]) object;
		BooksResponseDTO dto = new BooksResponseDTO();
		if (row.length >= 8) {
			dto.setId((Long) row[0]);
			dto.setTitle((String) row[1]);
			Timestamp sqlTime = (Timestamp) row[3];
			sqlTime.toLocalDateTime().toLocalDate();
			dto.setPublishedAt(sqlTime.toLocalDateTime());
			dto.setStock((Integer) row[4]);
			dto.setPrice((BigDecimal) row[5]);
			dto.setAuthors(row[9] != null ? ((String) row[9]).split(",") : new String[] { "" });
			dto.setType((String) row[2]);
			dto.setAverageRating(row[8] != null ? (BigDecimal) row[8] : BigDecimal.ZERO);
			dto.setUrlImg((String) row[7]);
		}
		return dto;
	}

}