spring.application.name=backend
# Database connection properties. The default values should work with the docker-compose file provided in the repository
# If you want to change this, make sure to also update the docker-compose file accordingly
app.database.name=starter-kit-db
app.database.username=root
app.database.password=password
app.database.host=localhost
app.database.port=3306
app.vapid-public-key=BCrMRKuJa7Qc7ZVHiV283YJvPiMvSDkjb1uHQQNWrIRT5ztgvi6RFPoiNjp70v_VL0VLjsODEPOrsNQjc1UVpVU
app.vapid-private-key=LtMT7hEqoQ2-jSRC8tj2l80AgUVKyDv9_5XQTHFpMng
app.vapid-subject=mailto:email@example.com

app.application-name=starter-kit
app.base-url=http://localhost:8080
app.allowed-origins=http://localhost:3000
app.login-page-url=${app.base-url}/auth/login
app.login-success-url=${app.login-page-url}/auth/login-success

app.s3.bucket-name=spring-boot-nextjs-starter
app.s3.access-key=6LJ5ViNkGYpHkAw9
app.s3.secret-key=RarfgD6Iq0HgoeyQgYayXMAztQvVtSGsudFFJr7Z
# I recommend using tebi.io, but you can use any s3 provider you want
app.s3.base-url=http://s3.tebi.io
app.s3.region=europe-central-1
app.s3.storage-class=STANDARD

app.admin-user-email=admin@email.com
app.admin-user-password=Password123

# Github OAuth2
spring.security.oauth2.client.registration.github.client-id=Ov23ligr9YC7IPOT3qvX
spring.security.oauth2.client.registration.github.client-secret=e18a6099a9535855ab18849f4ab2bb4929626de5

# Google
spring.security.oauth2.client.registration.google.client-id=2121212
spring.security.oauth2.client.registration.google.client-secret=2121212

# spring provided properties
spring.datasource.url=jdbc:mysql://${app.database.host}:${app.database.port}/${app.database.name}?createDatabaseIfNotExist=true&allowPublicKeyRetrieval=true&useSSL=FALSE
spring.datasource.driver-class-name=com.mysql.jdbc.Driver
spring.datasource.username=${app.database.username}
spring.datasource.password=${app.database.password}
spring.jpa.hibernate.ddl-auto=update
spring.jpa.database-platform=org.hibernate.dialect.MySQLDialect
spring.jpa.properties.hibernate.jdbc.time_zone=UTC

org.jobrunr.background-job-server.enabled=true
org.jobrunr.dashboard.enabled=true

# SMPT host, this is localhost for development, it should work with your mailpit docker container.
# You can open mailpit ui on http://localhost:8025 to see all emails sent from your application in development
# You will use the host from the provider of your choice in production
spring.mail.host=localhost
spring.mail.port=1025
spring.mail.username=user
spring.mail.password=password
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true

server.port=8080

#common logging levels that you might want to use in development, just uncomment the ones you want to use and set the level you want
logging.level.org.springframework.security=DEBUG
#logging.level.org.springframework.web=DEBUG
#logging.level.org.hibernate=TRACE
#logging.level.org.hibernate.type.descriptor.sql=trace
#logging.level.org.hibernate.SQL=DEBUG
#logging.level.org.hibernate.type=TRACE